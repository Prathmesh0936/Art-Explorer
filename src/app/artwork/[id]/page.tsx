import { fetchArtworkById, getImageUrl, getBestDescriptionForAI } from '@/lib/api';
import { summarizeArtwork } from '@/ai/flows/artwork-summarizer';
import type { ArtworkDetail } from '@/lib/types';
import Image from 'next/image';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { ArrowLeft, Info, Sparkles, Feather } from 'lucide-react';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { notFound } from 'next/navigation';
import { Suspense } from 'react';
import { LoadingSpinner } from '@/components/LoadingSpinner';

interface ArtworkPageProps {
  params: {
    id: string;
  };
}

async function ArtworkSummary({ artwork }: { artwork: ArtworkDetail }) {
  if (!artwork.title || !artwork.artist_display) {
    return (
       <Card className="mt-6 bg-secondary/50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Sparkles className="text-primary w-5 h-5" /> AI Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground">Summary cannot be generated due to missing title or artist information.</p>
        </CardContent>
      </Card>
    );
  }
  const descriptionForAI = getBestDescriptionForAI(artwork);
  try {
    const summaryResult = await summarizeArtwork({
      title: artwork.title,
      artist: artwork.artist_display,
      description: descriptionForAI,
    });

    return (
      <Card className="mt-6 shadow-md bg-gradient-to-br from-primary/5 via-background to-background">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-primary">
            <Feather className="w-6 h-6" />
            AI-Powered Insights
          </CardTitle>
          <CardDescription>A concise summary generated by our Art AI.</CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-foreground/90 leading-relaxed">{summaryResult.summary}</p>
        </CardContent>
      </Card>
    );
  } catch (error) {
    console.error("Failed to generate artwork summary:", error);
    return (
      <Card className="mt-6 bg-destructive/10">
        <CardHeader>
          <CardTitle className="flex items-center gap-2"><Sparkles className="text-destructive w-5 h-5" /> AI Summary</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-destructive-foreground">Could not generate summary at this time.</p>
        </CardContent>
      </Card>
    );
  }
}

function DetailItem({ label, value }: { label: string; value: string | null | undefined | string[] }) {
  if (!value || (Array.isArray(value) && value.length === 0)) return null;
  const displayValue = Array.isArray(value) ? value.join(', ') : value;
  return (
    <div>
      <h3 className="text-sm font-medium text-muted-foreground">{label}</h3>
      <p className="text-foreground/90">{displayValue}</p>
    </div>
  );
}

export default async function ArtworkPage({ params }: ArtworkPageProps) {
  const artworkId = parseInt(params.id, 10);
  if (isNaN(artworkId)) {
    notFound();
  }

  const artwork = await fetchArtworkById(artworkId);

  if (!artwork) {
    notFound();
  }

  const imageUrl = getImageUrl(artwork.image_id, 800);
  const placeholderText = artwork.thumbnail?.alt_text || artwork.title || "Artwork image";

  return (
    <div className="max-w-5xl mx-auto p-4 md:p-8">
      <Link href="/" passHref className="mb-8 inline-flex">
        <Button variant="outline">
          <ArrowLeft className="mr-2 h-4 w-4" />
          Back to Gallery
        </Button>
      </Link>

      <Card className="overflow-hidden shadow-xl">
        <div className="grid md:grid-cols-2">
          <div className="relative aspect-[4/3] md:aspect-auto bg-muted">
            <Image
              src={imageUrl}
              alt={placeholderText}
              width={800}
              height={600}
              className="object-contain w-full h-full"
              placeholder={artwork.thumbnail?.lqip ? 'blur' : 'empty'}
              blurDataURL={artwork.thumbnail?.lqip}
              data-ai-hint="artwork large painting"
              priority
            />
          </div>
          <div className="p-6 md:p-8 flex flex-col">
            <CardHeader className="p-0 mb-4">
              <CardTitle className="text-3xl lg:text-4xl font-bold text-primary leading-tight">
                {artwork.title || 'Untitled'}
              </CardTitle>
              <CardDescription className="text-lg text-muted-foreground mt-1">
                {artwork.artist_title || artwork.artist_display || 'Unknown Artist'}
              </CardDescription>
            </CardHeader>

            <CardContent className="p-0 space-y-4 flex-grow">
              <DetailItem label="Date" value={artwork.date_display} />
              <DetailItem label="Medium" value={artwork.medium_display} />
              <DetailItem label="Dimensions" value={artwork.dimensions} />
              <DetailItem label="Origin" value={artwork.place_of_origin} />
              <DetailItem label="Credit Line" value={artwork.credit_line} />
              
              {artwork.category_titles && artwork.category_titles.length > 0 && (
                <div>
                  <h3 className="text-sm font-medium text-muted-foreground mb-1">Categories</h3>
                  <div className="flex flex-wrap gap-2">
                    {artwork.category_titles.map((cat, index) => <Badge key={`${cat}-${index}`} variant="secondary">{cat}</Badge>)}
                  </div>
                </div>
              )}

              {artwork.term_titles && artwork.term_titles.length > 0 && (
                 <div>
                  <h3 className="text-sm font-medium text-muted-foreground mb-1">Keywords</h3>
                  <div className="flex flex-wrap gap-2">
                    {artwork.term_titles.map((term, index) => <Badge key={`${term}-${index}`} variant="outline">{term}</Badge>)}
                  </div>
                </div>
              )}
            </CardContent>
          </div>
        </div>
      </Card>

      {artwork.description && (
        <Card className="mt-6 shadow-md">
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><Info className="text-accent w-5 h-5" /> Provided Description</CardTitle>
          </CardHeader>
          <CardContent>
            <div 
              className="prose prose-sm max-w-none text-foreground/90" 
              dangerouslySetInnerHTML={{ __html: artwork.description || '' }} 
            />
          </CardContent>
        </Card>
      )}
      
      <Suspense fallback={
          <Card className="mt-6">
            <CardHeader><CardTitle>AI Summary</CardTitle></CardHeader>
            <CardContent className="flex items-center gap-2 text-muted-foreground">
              <LoadingSpinner size={20}/> Generating summary...
            </CardContent>
          </Card>
      }>
        <ArtworkSummary artwork={artwork} />
      </Suspense>

      {(artwork.provenance_text || artwork.exhibition_history || artwork.publication_history) && (
        <Card className="mt-6">
            <CardHeader>
                <CardTitle>Additional Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
                {artwork.provenance_text && (
                    <div>
                        <h3 className="font-semibold text-md mb-1">Provenance</h3>
                        <p className="text-sm text-muted-foreground whitespace-pre-wrap">{artwork.provenance_text}</p>
                    </div>
                )}
                {artwork.exhibition_history && (
                    <div>
                        <Separator className="my-2" />
                        <h3 className="font-semibold text-md mb-1">Exhibition History</h3>
                        <p className="text-sm text-muted-foreground whitespace-pre-wrap">{artwork.exhibition_history}</p>
                    </div>
                )}
                 {artwork.publication_history && (
                    <div>
                        <Separator className="my-2" />
                        <h3 className="font-semibold text-md mb-1">Publication History</h3>
                        <p className="text-sm text-muted-foreground whitespace-pre-wrap">{artwork.publication_history}</p>
                    </div>
                )}
            </CardContent>
        </Card>
      )}

    </div>
  );
}

export async function generateMetadata({ params }: ArtworkPageProps) {
  const artworkId = parseInt(params.id, 10);
  if (isNaN(artworkId)) return { title: "Artwork Not Found" };
  
  const artwork = await fetchArtworkById(artworkId);
  if (!artwork) {
    return {
      title: 'Artwork Not Found | Art Explorer',
    };
  }
  return {
    title: `${artwork.title || 'Untitled'} by ${artwork.artist_display || 'Unknown Artist'} | Art Explorer`,
    description: artwork.short_description || `Details for artwork: ${artwork.title}`,
  };
}
